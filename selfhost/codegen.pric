# -*- mode: ruby -*-

#include lib/std.pric
#include lib/words.pric
#include lib/types.pric
#include lib/json.pric

# --------------------------------

def asm_indent()
  putchar(C_SPC());
  putchar(C_SPC());
end

def asm_exit()
  var [5]temp_str;

  aset(&temp_str, 0, 101); # e
  aset(&temp_str, 1, 120); # x
  aset(&temp_str, 2, 105); # i
  aset(&temp_str, 3, 116); # t
  aset(&temp_str, 4,   0);

  asm_indent();
  print_s(&temp_str);
  putchar(C_LF());
end

def asm_label(label_)
  var [6]temp_str;

  aset(&temp_str, 0, 108); # l
  aset(&temp_str, 1,  97); # a
  aset(&temp_str, 2,  98); # b
  aset(&temp_str, 3, 101); # e
  aset(&temp_str, 4, 108); # l
  aset(&temp_str, 5,   0);

  print_s(&temp_str);
  putchar(C_SPC());
  print_s(label_);
  putchar(C_LF());
end

def asm_call(label_)
  var [5]temp_str;

  aset(&temp_str, 0,  99); # c
  aset(&temp_str, 1,  97); # a
  aset(&temp_str, 2, 108); # l
  aset(&temp_str, 3, 108); # l
  aset(&temp_str, 4,   0);

  asm_indent();
  print_s(&temp_str);
  putchar(C_SPC());
  print_s(label_);
  putchar(C_LF());
end

def asm_ret()
  var [4]temp_str;

  aset(&temp_str, 0, 114); # r
  aset(&temp_str, 1, 101); # e
  aset(&temp_str, 2, 116); # t
  aset(&temp_str, 3,   0);

  asm_indent();
  print_s(&temp_str);
  putchar(C_LF());
end

def asm_cp(src_, dest_)
  var [3]temp_str;

  aset(&temp_str, 0,  99); # c
  aset(&temp_str, 1, 112); # p
  aset(&temp_str, 2,   0);

  asm_indent();
  print_s(&temp_str);
  putchar(C_SPC());
  print_s(src_);
  putchar(C_SPC());
  print_s(dest_);
  putchar(C_LF());
end

def asm_push(arg_)
  var [5]temp_str;

  aset(&temp_str, 0, 112); # p
  aset(&temp_str, 1, 117); # u
  aset(&temp_str, 2, 115); # s
  aset(&temp_str, 3, 104); # h
  aset(&temp_str, 4,   0);

  asm_indent();
  print_s(&temp_str);
  putchar(C_SPC());
  print_s(arg_);
  putchar(C_LF());
end

def asm_pop(dest_)
  var [4]temp_str;

  aset(&temp_str, 0, 112); # p
  aset(&temp_str, 1, 111); # o
  aset(&temp_str, 2, 112); # p
  aset(&temp_str, 3,   0);

  asm_indent();
  print_s(&temp_str);
  putchar(C_SPC());
  print_s(dest_);
  putchar(C_LF());
end

def asm_sub_sp(n)
  var [7]temp_str;

  aset(&temp_str, 0, 115); # s
  aset(&temp_str, 1, 117); # u
  aset(&temp_str, 2,  98); # b
  aset(&temp_str, 3,  95); # _
  aset(&temp_str, 4, 115); # s
  aset(&temp_str, 5, 112); # p
  aset(&temp_str, 6,   0);

  asm_indent();
  print_s(&temp_str);
  putchar(C_SPC());
  print_i(n);
  putchar(C_LF());
end

def asm_fn_prologue()
  var [10]temp_str;
  var [10]temp_str2;

  aset(&temp_str, 0,  98); # b
  aset(&temp_str, 1, 112); # p
  aset(&temp_str, 2,   0);

  asm_push(&temp_str);

  aset(&temp_str, 0, 115); # s
  aset(&temp_str, 1, 112); # p
  aset(&temp_str, 2,   0);

  aset(&temp_str2, 0,  98); # b
  aset(&temp_str2, 1, 112); # p
  aset(&temp_str2, 2,   0);

  asm_cp(&temp_str, &temp_str2);
end

def asm_fn_epilogue()
  var [10]temp_str;
  var [10]temp_str2;

  aset(&temp_str, 0,  98); # b
  aset(&temp_str, 1, 112); # p
  aset(&temp_str, 2,   0);

  aset(&temp_str2, 0, 115); # s
  aset(&temp_str2, 1, 112); # p
  aset(&temp_str2, 2,   0);

  asm_cp(&temp_str, &temp_str2);

  aset(&temp_str, 0,  98); # b
  aset(&temp_str, 1, 112); # p
  aset(&temp_str, 2,   0);

  asm_pop(&temp_str);
end

# --------------------------------

# TODO gen_var
# TODO gen_case
# TODO gen_while
# TODO _gen_expr_add
# TODO _gen_expr_mult
# TODO _gen_expr_eq
# TODO _gen_expr_neq
# TODO _gen_expr_binary
# TODO gen_expr
# TODO gen_call
# TODO gen_call_set
# TODO gen_set
# TODO gen_return
# TODO gen_vm_comment
# TODO gen_stmt
# TODO gen_stmts

def gen_func(func_)
  var fn_name_;

  fn_name_ = Node_get_str(NodeList_get(func_, 1));
  asm_label(fn_name_);

  asm_fn_prologue();

  # TODO 関数の処理本体

  asm_fn_epilogue();

  asm_ret();
end

def gen_top_stmt(top_stmt_)
  var head_ = NodeList_get(top_stmt_, 0);

  case
  when (str_eq_func(Node_get_str(head_)))
    gen_func(top_stmt_);
  else
    panic(194);
  end
end

def gen_top_stmts(top_stmts_)
  var i;
  var top_stmt_;

  i = 1;
  while (i < NodeList_size(top_stmts_))
    top_stmt_ = NodeList_get_as_list(top_stmts_, i);
    gen_top_stmt(top_stmt_);
    i = i +1;
  end
end

def codegen(ast_)
  var [5]temp_str;

  aset(&temp_str, 0, 109); # m
  aset(&temp_str, 1,  97); # a
  aset(&temp_str, 2, 105); # i
  aset(&temp_str, 3, 110); # n
  aset(&temp_str, 4,   0);
  asm_call(&temp_str);

  asm_exit();

  gen_top_stmts(ast_);
end

def INPUT_MAX() return 77; end

def main()
  var [1]g;
  var [77]input; # INPUT_MAX
  var ast_;

  # init globals
  *(&g + GO_ALLOC_CURSOR()) = 0;

  read_stdin_all(&input, INPUT_MAX());
  assert(76, str_size(&input), 38);

  ast_ = Json_parse(&g, &input);

  codegen(ast_);
end
