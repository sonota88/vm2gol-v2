# -*- mode: ruby -*-

#include lib/std.pric

def INPUT_MAX() return 80; end

def match_kw(input_, pos)
  var [5]temp_str;
  var [5]pattern;

  aset(&pattern, 0, 102); # f
  aset(&pattern, 1, 117); # u
  aset(&pattern, 2, 110); # n
  aset(&pattern, 3,  99); # c
  aset(&pattern, 4,   0);

  substr(&temp_str, input_, pos, pos + 4);

  if (__and(
        str_eq(&pattern, &temp_str),
        is_ident_char(*(input_ + pos + 4)) == FALSE()
      ))
    return 4;
  else
    return 0;
  end
end

def is_ident_char(c)
  return (
    __or(
      __or(
        __or(
          __and(__le(48, c), __le(c, 57)), # 0..9
          __and(__le(65, c), __le(c, 90)) # A..Z
        ),
        __and(__le(97, c), __le(c, 122)) # a..z
      ),
      c == 95
    )
  );
end

def find_non_ident_char(input_, pos_from)
  var pos = pos_from;

  var c = char_at(input_, pos);
  var do_break = FALSE();

  while (__not(do_break))
    if (is_ident_char(c))
      pos = pos + 1;
      c = char_at(input_, pos);
    else
      do_break = TRUE();
    end
  end

  return pos;
end

def match_ident(input_, pos_from)
  var pos = find_non_ident_char(input_, pos_from);
  return __sub(pos, pos_from);
end

def match_symbol(input_, pos_from)
  var c = char_at(input_, pos_from);

  case
  when (c == 40) # (
    return 1;
  when (c == 41) # )
    return 1;
  when (c == 123) # {
    return 1;
  when (c == 125) # }
    return 1;
  else
    return 0;
  end
end

def print_kw(str_)
  putchar(107); # k
  putchar(119); # w
  putchar( 58); # :
  print_s(str_);
  putchar( 10); # LF
end

def print_ident(str_)
  putchar(105); # i
  putchar(100); # d
  putchar(101); # e
  putchar(110); # n
  putchar(116); # t
  putchar( 58); # :
  print_s(str_);
  putchar( 10); # LF
end

def print_symbol(str_)
  putchar(115); # s
  putchar(121); # y
  putchar(109); # m
  putchar( 58); # :
  print_s(str_);
  putchar( 10); # LF
end

def main()
  var [1]g;
  var [80]input; # INPUT_MAX
  var pos = 0;
  var do_break = FALSE();
  var size;
  var [8]temp_str;
  var c;

  # init globals
  *(&g + GO_ALLOC_CURSOR()) = 0;

  read_stdin_all(&input, INPUT_MAX());

  c = *(&input + pos);

  while (do_break == FALSE())

    size = match_kw(&input, pos);
    if (0 < size)
      substr(&temp_str, &input, pos, pos + size);
      print_kw(&temp_str);
      pos = pos + size;
    else

      if (__or(
            c == C_SPC(),
            c == C_LF()
          ))
        pos = pos + 1;
      else

        size = match_ident(&input, pos);
        if (0 < size)
          substr(&temp_str, &input, pos, pos + size);
          print_ident(&temp_str);
          pos = pos + size;

        else

          size = match_symbol(&input, pos);
          if (0 < size)
            substr(&temp_str, &input, pos, pos + size);
            print_symbol(&temp_str);
            pos = pos + size;

          else

            panic(160);
          end
        end

      end

    end

    c = *(&input + pos);
    if (__or(
          c == 0,
          __le(INPUT_MAX(), pos)
        ))
      do_break = TRUE();
    end
  end
end
