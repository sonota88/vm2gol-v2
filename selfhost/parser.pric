# -*- mode: ruby -*-

#include lib/std.pric
#include lib/words.pric
#include lib/types.pric
#include lib/json.pric

def INPUT_MAX() return 110; end

def get_line_size(input_, pos_from)
  var pos_to;
  var lf_pos = char_index(input_, C_LF(), pos_from);

  if (lf_pos != -1)
    pos_to = lf_pos + 1;
  else
    # LF not found
    pos_to = char_index(input_, 0, pos_from);
  end

  return __sub(pos_to, pos_from);
end

def set_token(g_, ti, t_)
  if (__le(NUM_TOKENS_MAX(), ti))
    p_int(NUM_TOKENS_MAX());
    p_int(ti);
    panic(27);
  end
  aset(g_ + GO_TOKENS(), ti, t_);
end

def read_tokens(g_, input_)
  var do_break = FALSE();
  var [20]line;
  var size;
  var pos = 0;
  var sep_i;
  var [6]kind_str;
  var [64]value_str;
  var t_;
  var ti;
  check_heap_stack_overlap(g_);

  while (__not(do_break))
    size = get_line_size(input_, pos);
    if (size == 0)
      do_break = TRUE();
    else
      substr(&line, input_, pos, pos + size);
      chomp(&line);

      sep_i = char_index(&line, 58, 0); # :
      substr(&kind_str, &line, 0, sep_i);
      substr(&value_str, &line, sep_i + 1, str_size(&line));

      t_ = Token_new(g_, &kind_str, &value_str);
      set_token(g_, ti, t_);
      ti = ti + 1;

      pos = pos + size;
    end
  end
end

# --------------------------------

def set_token_index(g_, ti)
  *(g_ + GO_TOKEN_INDEX()) = ti;
end

def get_token_index(g_)
  return *(g_ + GO_TOKEN_INDEX());
end

def inc_token_index(g_)
  set_token_index(
    g_,
    get_token_index(g_) + 1
  );
end

def peek(g_, i)
  var ti = get_token_index(g_);
  return *(g_ + GO_TOKENS() + ti + i);
end

def consume_kw(g_, str_)
  var t_ = peek(g_, 0);
  if (__and(
        Token_kind_eq(t_, TOKEN_KIND__KW()),
        Token_value_eq(t_, str_)
  ))
    inc_token_index(g_);
  else
    p_int(Token_get_kind(t_));
    print_s(Token_get_val(t_));
    print_s(str_);
    panic(98);
  end
end

def consume_sym(g_, str_)
  var t_ = peek(g_, 0);
  if (__and(
        Token_kind_eq(t_, TOKEN_KIND__SYM()),
        Token_value_eq(t_, str_)
  ))
    inc_token_index(g_);
  else
    p_int(Token_get_kind(t_));
    print_s(Token_get_val(t_));
    print_s(str_);
    panic(117);
  end
end

# --------------------------------

# TODO _parse_arg
# TODO _parse_args_first
# TODO _parse_args_rest
# TODO parse_args

def parse_func(g_)
  var func_main_;
  var [10]temp_str;
  var t_;
  var stmts_;
  var stmt_;
  var do_break = FALSE();
  var [4]str_var;
  check_heap_stack_overlap(g_);

  aset(&str_var, 0, 118); # v
  aset(&str_var, 1, 097); # a
  aset(&str_var, 2, 114); # r
  aset(&str_var, 3, 0);

  # TODO consume_kw に置き換え
  inc_token_index(g_);
  assert(1, get_token_index(g_), 113);

  func_main_ = NodeList_new(g_);

  aset(&temp_str, 0, 102); # f
  aset(&temp_str, 1, 117); # u
  aset(&temp_str, 2, 110); # n
  aset(&temp_str, 3,  99); # c
  aset(&temp_str, 4,   0);
  NodeList_add_str(g_, func_main_, &temp_str);

  t_ = peek(g_, 0);
  inc_token_index(g_);
  NodeList_add_str(g_, func_main_, Token_get_val(t_));

  inc_token_index(g_); # ( TODO Use consume_sym
  inc_token_index(g_); # ) TODO Use consume_sym
  assert(4, get_token_index(g_), 131);
  NodeList_add_list(g_, func_main_, NodeList_new(g_));

  inc_token_index(g_); # { TODO Use consume_sym

  stmts_ = NodeList_new(g_);

  while(__not(do_break))
    t_ = peek(g_, 0);
    if (char_at(Token_get_val(t_), 0) == 125) # }
      do_break = TRUE();
    else

      if (str_eq(Token_get_val(t_), &str_var))
        stmt_ = parse_var(g_);
      else
        stmt_ = parse_stmt(g_);
      end
      NodeList_add_list(g_, stmts_, stmt_);

    end
  end

  inc_token_index(g_); # } TODO Use consume_sym

  NodeList_add_list(g_, func_main_, stmts_);

  return func_main_;
end

def _parse_var_declare(g_)
  var stmt_;
  var [4]str_var;
  var [2]str_semicolon;
  var t_;
  var var_name_;
  check_heap_stack_overlap(g_);

  str_set_var(&str_var);

  aset(&str_semicolon, 0, 59);
  aset(&str_semicolon, 1,  0);

  stmt_ = NodeList_new(g_);

  consume_kw(g_, &str_var);
  NodeList_add_str(g_, stmt_, &str_var);

  t_ = peek(g_, 0);
  inc_token_index(g_);
  var_name_ = Token_get_val(t_);
  NodeList_add_str(g_, stmt_, var_name_);

  consume_sym(g_, &str_semicolon);

  return stmt_;
end

def _parse_var_init(g_)
  var stmt_;
  var [4]str_var;
  var [2]str_semicolon;
  var [2]str_equal;
  var t_;
  var var_name_;
  var expr_node_;
  check_heap_stack_overlap(g_);

  str_set_var(&str_var);

  aset(&str_semicolon, 0, 59); # ;
  aset(&str_semicolon, 1,  0);

  aset(&str_equal, 0, 61); # =
  aset(&str_equal, 1,  0);

  stmt_ = NodeList_new(g_);

  consume_kw(g_, &str_var);
  NodeList_add_str(g_, stmt_, &str_var);

  t_ = peek(g_, 0);
  inc_token_index(g_);
  var_name_ = Token_get_val(t_);
  NodeList_add_str(g_, stmt_, var_name_);

  consume_sym(g_, &str_equal);

  expr_node_ = parse_expr(g_);
  NodeList_add(stmt_, expr_node_);

  consume_sym(g_, &str_semicolon);

  return stmt_;
end

def parse_var(g_)
  var [2]str_semicolon;
  var [2]str_equal;
  var t_;

  aset(&str_semicolon, 0, 59); #;
  aset(&str_semicolon, 1,  0);

  aset(&str_equal, 0, 61); # =
  aset(&str_equal, 1,  0);

  t_ = peek(g_, 2);
  case
  when (Token_value_eq(t_, &str_semicolon))
    _parse_var_declare(g_);
  when (Token_value_eq(t_, &str_equal))
    _parse_var_init(g_);
  else
    print_s(Token_get_val(t_));
    panic(240); # must not happen
  end

end

# TODO _parse_expr_right

def parse_expr(g_)
  var t_;
  var n;
  var expr_node_;

  t_ = peek(g_, 0);
  inc_token_index(g_);

  case
  when (Token_kind_eq(t_, TOKEN_KIND__INT()))
    n = parse_int(Token_get_val(t_));
    expr_node_ = Node_new_int(g_, n);
  else
    panic(254); # not yet impl
  end

  return expr_node_;
end

def parse_set(g_)
  var stmt_;
  var [4]str_set;
  var [2]str_eq;
  var [2]str_semicolon;
  var t_;
  var var_name_;
  var expr;

  str_set_set(&str_set);

  aset(&str_eq, 0, 61); # =
  aset(&str_eq, 1,  0);

  aset(&str_semicolon, 0, 59); # ;
  aset(&str_semicolon, 1,  0);

  consume_kw(g_, &str_set);

  t_ = peek(g_, 0);
  inc_token_index(g_);
  var_name_ = Token_get_val(t_);

  consume_sym(g_, &str_eq);

  t_ = peek(g_, 0);
  inc_token_index(g_);
  expr = parse_int(Token_get_val(t_));

  consume_sym(g_, &str_semicolon);

  stmt_ = NodeList_new(g_);

  NodeList_add_str(g_, stmt_, &str_set);

  NodeList_add_str(g_, stmt_, var_name_);

  NodeList_add_int(g_, stmt_, expr);

  return stmt_;
end

# TODO parse_funcall
# TODO parse_call
# TODO parse_call_set
# TODO parse_return
# TODO _parse_when_clause
# TODO parse_case
# TODO parse_while
# TODO parse_vm_comment

def parse_stmt(g_)
  return parse_set(g_);
end

# TODO parse_stmts
# TODO parse_top_stmt

def parse_top_stmts(g_)
  var top_stmts_;
  var [10]temp_str;

  top_stmts_ = NodeList_new(g_);

  aset(&temp_str, 0, 116); # t
  aset(&temp_str, 1, 111); # o
  aset(&temp_str, 2, 112); # p
  aset(&temp_str, 3,  95); # _
  aset(&temp_str, 4, 115); # s
  aset(&temp_str, 5, 116); # t
  aset(&temp_str, 6, 109); # m
  aset(&temp_str, 7, 116); # t
  aset(&temp_str, 8, 115); # s
  aset(&temp_str, 9,   0);
  NodeList_add_str(g_, top_stmts_, &temp_str);

  NodeList_add_list(g_, top_stmts_, parse_func(g_));

  return top_stmts_;
end

def parse(g_)
  return parse_top_stmts(g_);
end

def GO_TOKENS() return GO_ALLOC_CURSOR() + GS_ALLOC_CURSOR(); end
def GS_TOKENS() return 15; end

def GO_TOKEN_INDEX() return GO_TOKENS() + GS_TOKENS(); end
def GS_TOKEN_INDEX() return 1; end

def NUM_TOKENS_MAX()
  return GS_TOKENS();
end

def main()
  var [17]g;
  var [110]input; # INPUT_MAX

  # init globals
  init_alloc_cursor(&g);
  set_token_index(&g, 0);
  assert(0, get_token_index(&g), 183);

  read_stdin_all(&input, INPUT_MAX());
  read_tokens(&g, &input);

  var ast_ = parse(&g);

  Json_print(ast_);
end
