  call main
  exit

label to_vi
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  mov reg_a [bp:4]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  pop reg_b
  pop reg_a
  mul reg_b
  push reg_a
  mov reg_a [bp:3]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  push reg_a
  mov reg_a [bp:5]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  mov reg_a [bp:-1]

  mov sp bp
  pop bp
  ret

  mov sp bp
  pop bp
  ret

label vram_set
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  mov reg_a 0
  push reg_a
  mov reg_a [bp:4]
  push reg_a
  mov reg_a [bp:3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~to_vi
  call to_vi
  add sp 4
  mov [bp:-1] reg_a
  mov reg_a [bp:5]
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~set_vram
  call set_vram
  add sp 2

  mov sp bp
  pop bp
  ret

label vram_set_buf
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  mov reg_a 25
  push reg_a
  mov reg_a [bp:4]
  push reg_a
  mov reg_a [bp:3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~to_vi
  call to_vi
  add sp 4
  mov [bp:-1] reg_a
  mov reg_a [bp:5]
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~set_vram
  call set_vram
  add sp 2

  mov sp bp
  pop bp
  ret

label vram_get
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  add sp -1
  mov reg_a 0
  push reg_a
  mov reg_a [bp:4]
  push reg_a
  mov reg_a [bp:3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~to_vi
  call to_vi
  add sp 4
  mov [bp:-1] reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~get_vram
  call get_vram
  add sp 1
  mov [bp:-2] reg_a
  mov reg_a [bp:-2]

  mov sp bp
  pop bp
  ret

  mov sp bp
  pop bp
  ret

label adjust_index
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1

  # -->> case_1
  # when_1_0: ["==", "i", -1]
  # -->> eval_expr_1
  mov reg_a [bp:3]
  push reg_a
  mov reg_a -1
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_2
  mov reg_a 0
  jmp end_eq_2
label then_2
  mov reg_a 1
label end_eq_2
  # <<-- eval_expr_1
  mov reg_b 0
  compare
  je end_when_1_0
  _cmt 下限を超えた場合
  mov reg_a [bp:2]
  push reg_a
  mov reg_a -1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  jmp end_case_1
label end_when_1_0
  # when_1_1: ["==", "i", "width"]
  # -->> eval_expr_1
  mov reg_a [bp:3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_3
  mov reg_a 0
  jmp end_eq_3
label then_3
  mov reg_a 1
label end_eq_3
  # <<-- eval_expr_1
  mov reg_b 0
  compare
  je end_when_1_1
  _cmt 上限を超えた場合
  mov reg_a 0
  mov [bp:-1] reg_a
  jmp end_case_1
label end_when_1_1
  # when_1_2: ["==", 1, 1]
  # -->> eval_expr_1
  mov reg_a 1
  push reg_a
  mov reg_a 1
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_4
  mov reg_a 0
  jmp end_eq_4
label then_4
  mov reg_a 1
label end_eq_4
  # <<-- eval_expr_1
  mov reg_b 0
  compare
  je end_when_1_2
  _cmt 補正が不要な場合
  mov reg_a [bp:3]
  mov [bp:-1] reg_a
  jmp end_case_1
label end_when_1_2
label end_case_1
  # <<-- case_1

  mov reg_a [bp:-1]

  mov sp bp
  pop bp
  ret

  mov sp bp
  pop bp
  ret

label calc_next_gen
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  mov reg_a 0
  mov [bp:-1] reg_a

  # -->> case_5
  # when_5_0: ["==", "current_val", 0]
  # -->> eval_expr_5
  mov reg_a [bp:2]
  push reg_a
  mov reg_a 0
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_6
  mov reg_a 0
  jmp end_eq_6
label then_6
  mov reg_a 1
label end_eq_6
  # <<-- eval_expr_5
  mov reg_b 0
  compare
  je end_when_5_0

  # -->> case_7
  # when_7_0: ["==", "count", 3]
  # -->> eval_expr_7
  mov reg_a [bp:3]
  push reg_a
  mov reg_a 3
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_8
  mov reg_a 0
  jmp end_eq_8
label then_8
  mov reg_a 1
label end_eq_8
  # <<-- eval_expr_7
  mov reg_b 0
  compare
  je end_when_7_0
  mov reg_a 1
  mov [bp:-1] reg_a
  jmp end_case_7
label end_when_7_0
label end_case_7
  # <<-- case_7

  jmp end_case_5
label end_when_5_0
  # when_5_1: ["==", 0, 0]
  # -->> eval_expr_5
  mov reg_a 0
  push reg_a
  mov reg_a 0
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_9
  mov reg_a 0
  jmp end_eq_9
label then_9
  mov reg_a 1
label end_eq_9
  # <<-- eval_expr_5
  mov reg_b 0
  compare
  je end_when_5_1

  # -->> case_10
  # when_10_0: ["==", "count", 2]
  # -->> eval_expr_10
  mov reg_a [bp:3]
  push reg_a
  mov reg_a 2
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_11
  mov reg_a 0
  jmp end_eq_11
label then_11
  mov reg_a 1
label end_eq_11
  # <<-- eval_expr_10
  mov reg_b 0
  compare
  je end_when_10_0
  mov reg_a 1
  mov [bp:-1] reg_a
  jmp end_case_10
label end_when_10_0
  # when_10_1: ["==", "count", 3]
  # -->> eval_expr_10
  mov reg_a [bp:3]
  push reg_a
  mov reg_a 3
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_12
  mov reg_a 0
  jmp end_eq_12
label then_12
  mov reg_a 1
label end_eq_12
  # <<-- eval_expr_10
  mov reg_b 0
  compare
  je end_when_10_1
  mov reg_a 1
  mov [bp:-1] reg_a
  jmp end_case_10
label end_when_10_1
label end_case_10
  # <<-- case_10

  jmp end_case_5
label end_when_5_1
label end_case_5
  # <<-- case_5

  mov reg_a [bp:-1]

  mov sp bp
  pop bp
  ret

  mov sp bp
  pop bp
  ret

label count_alive
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  mov reg_a 0
  mov [bp:-1] reg_a
  add sp -1
  mov reg_a [bp:4]
  push reg_a
  mov reg_a -1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-2] reg_a
  add sp -1
  mov reg_a [bp:4]
  push reg_a
  mov reg_a 1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-3] reg_a
  add sp -1
  mov reg_a [bp:5]
  push reg_a
  mov reg_a -1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-4] reg_a
  add sp -1
  mov reg_a [bp:5]
  push reg_a
  mov reg_a 1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-5] reg_a
  _cmt xl~の補正の直前
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~adjust_index
  call adjust_index
  add sp 2
  mov [bp:-2] reg_a
  _cmt xl~の補正の直後
  _cmt xr~の補正の直前
  mov reg_a [bp:-3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~adjust_index
  call adjust_index
  add sp 2
  mov [bp:-3] reg_a
  _cmt xr~の補正の直後
  _cmt yt~の補正の直前
  mov reg_a [bp:-4]
  push reg_a
  mov reg_a [bp:3]
  push reg_a
  _cmt call~~adjust_index
  call adjust_index
  add sp 2
  mov [bp:-4] reg_a
  _cmt yt~の補正の直後
  _cmt yb~の補正の直前
  mov reg_a [bp:-5]
  push reg_a
  mov reg_a [bp:3]
  push reg_a
  _cmt call~~adjust_index
  call adjust_index
  add sp 2
  mov [bp:-5] reg_a
  _cmt yb~の補正の直後
  _cmt 座標補正の直後
  add sp -1
  _cmt 左上
  mov reg_a [bp:-4]
  push reg_a
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-6] reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:-6]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  _cmt 上
  mov reg_a [bp:-4]
  push reg_a
  mov reg_a [bp:4]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-6] reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:-6]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  _cmt 右上
  mov reg_a [bp:-4]
  push reg_a
  mov reg_a [bp:-3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-6] reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:-6]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  _cmt 左
  mov reg_a [bp:5]
  push reg_a
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-6] reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:-6]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  _cmt 右
  mov reg_a [bp:5]
  push reg_a
  mov reg_a [bp:-3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-6] reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:-6]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  _cmt 左下
  mov reg_a [bp:-5]
  push reg_a
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-6] reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:-6]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  _cmt 下
  mov reg_a [bp:-5]
  push reg_a
  mov reg_a [bp:4]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-6] reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:-6]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  _cmt 右下
  mov reg_a [bp:-5]
  push reg_a
  mov reg_a [bp:-3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-6] reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:-6]
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  _cmt count_aliveの最後
  mov reg_a [bp:-1]

  mov sp bp
  pop bp
  ret

  mov sp bp
  pop bp
  ret

label make_next_gen
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  mov reg_a 0
  mov [bp:-1] reg_a
  add sp -1
  mov reg_a 0
  mov [bp:-2] reg_a
  add sp -1
  add sp -1
  add sp -1

label while_13
  # -->> eval_expr_13
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:3]
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_14
  mov reg_a 1
  jmp end_neq_14
label then_14
  mov reg_a 0
label end_neq_14
  # <<-- eval_expr_13
  mov reg_b 0
  compare
  je end_while_13
  mov reg_a 0
  mov [bp:-1] reg_a

label while_15
  # -->> eval_expr_15
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_16
  mov reg_a 1
  jmp end_neq_16
label then_16
  mov reg_a 0
label end_neq_16
  # <<-- eval_expr_15
  mov reg_b 0
  compare
  je end_while_15
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:3]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~count_alive
  call count_alive
  add sp 4
  mov [bp:-3] reg_a
  _cmt count_alive~から戻った直後
  _cmt 次世代の生死決定の直前
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_get
  call vram_get
  add sp 3
  mov [bp:-4] reg_a
  mov reg_a [bp:-3]
  push reg_a
  mov reg_a [bp:-4]
  push reg_a
  _cmt call~~calc_next_gen
  call calc_next_gen
  add sp 2
  mov [bp:-5] reg_a
  _cmt 次世代の生死決定の直後
  mov reg_a [bp:-5]
  push reg_a
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a [bp:2]
  push reg_a
  _cmt call~~vram_set_buf
  call vram_set_buf
  add sp 4
  _cmt vram_set_buf~から戻った直後
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a 1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  jmp while_15
label end_while_15

  mov reg_a [bp:-2]
  push reg_a
  mov reg_a 1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-2] reg_a
  jmp while_13
label end_while_13


  mov sp bp
  pop bp
  ret

label replace_with_buf
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  mov reg_a 0
  mov [bp:-1] reg_a
  add sp -1
  add sp -1

label while_17
  # -->> eval_expr_17
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a 25
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_18
  mov reg_a 1
  jmp end_neq_18
label then_18
  mov reg_a 0
label end_neq_18
  # <<-- eval_expr_17
  mov reg_b 0
  compare
  je end_while_17
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a 25
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-2] reg_a
  mov reg_a [bp:-2]
  push reg_a
  _cmt call~~get_vram
  call get_vram
  add sp 1
  mov [bp:-3] reg_a
  mov reg_a [bp:-3]
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~set_vram
  call set_vram
  add sp 2
  mov reg_a [bp:-1]
  push reg_a
  mov reg_a 1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-1] reg_a
  jmp while_17
label end_while_17


  mov sp bp
  pop bp
  ret

label main
  push bp
  mov bp sp

  # 関数の処理本体
  add sp -1
  mov reg_a 5
  mov [bp:-1] reg_a
  add sp -1
  mov reg_a 5
  mov [bp:-2] reg_a
  mov reg_a 1
  push reg_a
  mov reg_a 0
  push reg_a
  mov reg_a 1
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~vram_set
  call vram_set
  add sp 4
  mov reg_a 1
  push reg_a
  mov reg_a 1
  push reg_a
  mov reg_a 2
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~vram_set
  call vram_set
  add sp 4
  mov reg_a 1
  push reg_a
  mov reg_a 2
  push reg_a
  mov reg_a 0
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~vram_set
  call vram_set
  add sp 4
  mov reg_a 1
  push reg_a
  mov reg_a 2
  push reg_a
  mov reg_a 1
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~vram_set
  call vram_set
  add sp 4
  mov reg_a 1
  push reg_a
  mov reg_a 2
  push reg_a
  mov reg_a 2
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~vram_set
  call vram_set
  add sp 4
  add sp -1
  mov reg_a 0
  mov [bp:-3] reg_a
  add sp -1
  mov reg_a 1
  mov [bp:-4] reg_a

label while_19
  # -->> eval_expr_19
  mov reg_a [bp:-4]
  push reg_a
  mov reg_a [bp:-3]
  push reg_a
  pop reg_b
  pop reg_a
  compare
  je then_20
  mov reg_a 1
  jmp end_neq_20
label then_20
  mov reg_a 0
label end_neq_20
  # <<-- eval_expr_19
  mov reg_b 0
  compare
  je end_while_19
  mov reg_a [bp:-2]
  push reg_a
  mov reg_a [bp:-1]
  push reg_a
  _cmt call~~make_next_gen
  call make_next_gen
  add sp 2
  _cmt call~~replace_with_buf
  call replace_with_buf
  add sp 0
  mov reg_a [bp:-4]
  push reg_a
  mov reg_a 1
  push reg_a
  pop reg_b
  pop reg_a
  add reg_a reg_b
  mov [bp:-4] reg_a
  jmp while_19
label end_while_19


  mov sp bp
  pop bp
  ret

label set_vram
  push bp
  mov bp sp
  set_vram [bp:2] [bp:3]
  mov sp bp
  pop bp
  ret

label get_vram
  push bp
  mov bp sp
  get_vram [bp:2] reg_a
  mov sp bp
  pop bp
  ret
